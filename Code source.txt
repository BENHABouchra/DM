import pandas as pd

# read the csv-formatted data file into a pandas dataframe
df=pd.read_csv('diabetes-1.csv')
# get shape of data frame
print('Shape (n_rows,n_columns) of dataframe:',df.shape)
# print top 5 rows of data frame
df.head()

df2=df[['Pregnancies','BMI','Outcome']].head()
df2

df3=df[['Insulin']].head()
df3

# Le premier élément est le nombre de lignes, le second est celui de colonnes:
print(df[df.BMI>30].shape)
# le premier élément (nbr lignes) a pour index 0, le second (nbr colonnes) 1.
print('The number of rows where BMI>30 = ',df[df.BMI>30].shape[0])
df[df.BMI<10].head()

df[df.BMI<10].head()
df.BMI>30
df.isnull().sum()
df.notnull().sum()
df.columns
df.dtypes
df.describe()
df.Outcome.value_counts()
#df.Insulin.value_counts()
df[df.Outcome==1].SkinThickness.mean()
# get a plotting library
import matplotlib.pyplot as plt
# make it interactive in the notebook
# (Only for matplot online)
%matplotlib inline
# plot Glucose vs BloodPressure and color points according to Outcome
plt.figure()
plt.scatter(df[df.Outcome==1].Glucose,df[df.Outcome==1].BloodPressure,label='Diabetes',color='r',s=3)
plt.scatter(df[df.Outcome==0].Glucose,df[df.Outcome==0].BloodPressure,label='No Diabetes',color='b',s=3)
plt.legend()
plt.xlabel('Glucose')
plt.ylabel('BloodPressure')
for c in df.columns:
    print('For column',c,' there are',df[df[c]==0][c].count(),'zero values.')
for c in df.columns:
    plt.figure()
    plt.hist(df[c],bins=15)
    plt.xlabel(c)
    plt.ylabel('frequency')
    plt.show()
# example: plot histograms of Age for Outcome=1 and Outcome=0.
plt.figure()
plt.hist(df[df.Outcome==1]['Age'],bins=15,label='Diabetes',color='r',alpha=0.2)
plt.hist(df[df.Outcome==0]['Age'],bins=15,label='No Diabetes',color='b',alpha=0.2)
plt.xlabel('Age')
plt.ylabel('frequency')
plt.legend()
plt.show()
import numpy as np
# example
# create a new column in the data frame with the predicted outcome based on your split (here, Age<30 means outcome=0, otherwise outcome=1)
df['PredictedOutcome']=np.where(df.Age<30,0,1) # np.where(condition, value if true, value if false)
# calculate accuracy
N_correct=df[df.PredictedOutcome==df.Outcome].shape[0]
N_total=df.shape[0]
accuracy=N_correct/N_total
print('number of correct examples =',N_correct)
print('number of examples in total =',N_total)
print('accuracy =',accuracy)
# avec la fonction train_test_split de sklearn on peut facilement diviser notre dataframe en ensembles train/test
import sklearn
from sklearn.model_selection import train_test_split
# 0,3 pour préciser que 30% seront pour l'ensemble de test et 70% pour l'entrainement
train, test = train_test_split(df, test_size = 0.3, random_state = 0)

train.describe()
train.drop('Insulin',axis=1,inplace=True)
test.drop('Insulin',axis=1,inplace=True) # axis=1 veut dire supprimer la colonne pas la ligne
# check that Insulin is no longer in the list of columns
train.columns
# La lib numpy offre plusieurs fonction très utiles, comme par exemple: elle nous permet de crèer une nouvelle colonne dans notre
# dataframe si une condition est satisfaite
import numpy as np

def imputeColumns(dataset):
    # create a list of columns that we will impute with the average non-zero value in each column
    columnsToImpute=['Glucose', 'BloodPressure', 'SkinThickness','BMI']

    for c in columnsToImpute:
        avgOfCol=dataset[dataset[c]>0][[c]].mean()
        dataset[c+'_imputed']=np.where(dataset[[c]]!=0,dataset[[c]],avgOfCol)
imputeColumns(train)
imputeColumns(test)
# check that we've imputed the 0 values
train[train.Glucose==0][['Glucose','Glucose_imputed']].head()
X_train = train[['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness','BMI', 'DiabetesPedigreeFunction', 'Age']]
Y_train = train[['Outcome']]
X_test = test[['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'BMI', 'DiabetesPedigreeFunction', 'Age']]
Y_test = test[['Outcome']]
Y_train.describe()
Y_test.describe()
import seaborn as sns
corrmat=df.corr()
top_corr_features=corrmat.index
plt.figure(figsize=(5,5))
g=sns.heatmap(df[top_corr_features].corr(),annot=True,cmap="BrBG")


